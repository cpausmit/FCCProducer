
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>
#include <iterator>
#include <filesystem>
#include <cmath>

// Program to remove dummy photons from LHE file, generated by KKMC BES
// g++ -o convLHE convLHE.cpp

int main(int argc, char *argv[]) {
    
    std::filesystem::path p(argv[1]);
    
    std::ifstream infile(argv[1]);
    std::ofstream outfile(p.stem().string() + "_conv" + p.extension().string()); //Temporary file
    
    std::string line;
    int removed = 0;
    float xing = std::stof(argv[2])/1000.; // crossing angle in mrad
    float tan_xing = std::tan(xing);
    float sqrt_tan_xing = std::sqrt(1.+tan_xing*tan_xing);
    bool inEvent = false;
    bool skip = false;
    while (std::getline(infile, line)) {
        std::istringstream iss(line);
        skip = false;
        
        // check for new event
        if(line.find("<event>") != std::string::npos) {
            inEvent = false;
        }

        if(inEvent) {

            // split line
            std::stringstream ss(line);
            std::istream_iterator<std::string> begin(ss);
            std::istream_iterator<std::string> end;
            std::vector<std::string> tokens(begin, end);
            
            if(std::stoi(tokens.at(1)) == 9999) { // decrease particle number
                
                tokens.at(0) = std::to_string(std::stoi(tokens.at(0))-removed);

                ss.str("");
                ss.clear();
                for(auto it = tokens.begin(); it != tokens.end(); it++)    {
                    ss << "\t" << *it;
                }
                line = ss.str();
            }
            else {
            
                if(line.find("0.0000000000000000") != std::string::npos and line.find(" 22 ") != std::string::npos and std::stoi(tokens.at(0)) == 22 and std::stof(tokens.at(6)) == 0.0 and std::stof(tokens.at(7)) == 0.0 and std::stof(tokens.at(10)) == 0.0) { // search for photons with px and py equal to zero
                    removed += 1;
                    skip = true;
                }
                else { // apply xing
                    float px = std::stof(tokens.at(6));
                    float e = std::stof(tokens.at(9));
                    float e_new = e*sqrt_tan_xing + px*tan_xing;
                    float px_new = px*sqrt_tan_xing + e*tan_xing;
                    ss.str("");
                    ss.clear();
                    for(int itt=0; itt<tokens.size(); itt++) {
                        if(itt == 6) ss << "\t" << std::fixed << std::setprecision(15) << px_new;
                        else if(itt == 9) ss << "\t" << std::fixed << std::setprecision(15) << e_new;
                        else ss << "\t" << tokens.at(itt);
                    }
                    line = ss.str();
                }
            }
        }
        
        // check for new event
        if(line.find("</event>") != std::string::npos) {
            removed = 0;
            inEvent = true;
        }
               
        if(!skip) outfile << line + "\n";
    }
    
    infile.close();
    outfile.close();

    return 0;
}
